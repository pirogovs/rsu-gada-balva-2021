{"version":3,"sources":["js/bind_polyfill.js","js/classlist_polyfill.js","js/animframe_polyfill.js","js/keyboard_input_manager.js","js/html_actuator.js","js/local_storage_manager.js","js/tile.js","js/grid.js","js/game_manager.js","js/application.js"],"names":["Function","prototype","bind","target","self","args","Array","apply","window","Element","document","documentElement","obj","prop","getter","push","splice","join","DOMTokenList","add","token","contains","call","el","className","toString","indexOf","item","index","remove","i","length","toggle","HTMLElement","Object","defineProperty","get","__defineGetter__","classes","replace","split","lastTime","vendors","x","requestAnimationFrame","cancelAnimationFrame","callback","currTime","Date","getTime","timeToCall","Math","max","id","setTimeout","clearTimeout","KeyboardInputManager","events","navigator","msPointerEnabled","eventTouchstart","eventTouchmove","eventTouchend","listen","on","event","emit","data","callbacks","forEach","touchStartClientX","touchStartClientY","map","addEventListener","modifiers","altKey","ctrlKey","metaKey","shiftKey","mapped","which","undefined","preventDefault","restart","bindButtonPress","keepPlaying","gameContainer","getElementsByClassName","touches","targetTouches","pageX","pageY","clientX","clientY","touchEndClientX","touchEndClientY","changedTouches","dx","absDx","abs","dy","absDy","selector","fn","button","querySelector","HTMLActuator","tileContainer","scoreContainer","bestContainer","messageContainer","score","actuate","grid","metadata","clearContainer","cells","column","cell","addTile","updateScore","updateBestScore","bestScore","terminated","over","message","won","continueGame","clearMessage","container","firstChild","removeChild","tile","wrapper","createElement","inner","position","previousPosition","y","positionClass","value","applyClasses","classList","mergedFrom","merged","appendChild","element","setAttribute","normalizePosition","difference","textContent","addition","type","getElementsByTagName","LocalStorageManager","bestScoreKey","gameStateKey","supported","localStorageSupported","storage","localStorage","fakeStorage","_data","setItem","val","String","getItem","hasOwnProperty","removeItem","clear","error","getBestScore","setBestScore","getGameState","stateJSON","JSON","parse","setGameState","gameState","stringify","clearGameState","Tile","savePosition","updatePosition","serialize","Grid","size","previousState","fromState","empty","row","state","randomAvailableCell","availableCells","floor","random","eachCell","cellsAvailable","cellAvailable","cellOccupied","cellContent","withinBounds","insertTile","removeTile","cellState","GameManager","InputManager","Actuator","StorageManager","inputManager","storageManager","actuator","startTiles","move","setup","isGameTerminated","addStartTiles","addRandomTile","prepareTiles","moveTile","direction","vector","getVector","traversals","buildTraversals","moved","positions","findFarthestPosition","next","farthest","positionsEqual","movesAvailable","pos","reverse","previous","tileMatchesAvailable","other","first","second"],"mappings":";AAAAA,SAASC,UAAUC,KAAOF,SAASC,UAAUC,MAAQ,SAAUC,GACzDC,IAAAA,EAAO,KACJ,OAAA,SAAUC,GACTA,aAAgBC,QACpBD,EAAO,CAACA,IAEVD,EAAKG,MAAMJ,EAAQE;;CCNvB,WACM,UAA0B,IAAnBG,OAAOC,SACd,cAAeC,SAASC,iBADxB,CAKAV,IAmDyBW,EAAKC,EAAMC,EAnDpCb,EAAYK,MAAML,UAClBc,EAAOd,EAAUc,KACjBC,EAASf,EAAUe,OACnBC,EAAOhB,EAAUgB,KAYrBC,EAAajB,UAAY,CACvBkB,IAAK,SAAUC,GACT,KAAKC,SAASD,KAClBL,EAAKO,KAAK,KAAMF,GACXG,KAAAA,GAAGC,UAAY,KAAKC,aAE3BJ,SAAU,SAAUD,GACX,OAAqC,GAArC,KAAKG,GAAGC,UAAUE,QAAQN,IAEnCO,KAAM,SAAUC,GACP,OAAA,KAAKA,IAAU,MAExBC,OAAQ,SAAUT,GACZ,GAAC,KAAKC,SAASD,GAAf,CACC,IAAA,IAAIU,EAAI,EAAGA,EAAI,KAAKC,QACnB,KAAKD,IAAMV,EADgBU,KAGjCd,EAAOM,KAAK,KAAMQ,EAAG,GAChBP,KAAAA,GAAGC,UAAY,KAAKC,aAE3BA,SAAU,WACDR,OAAAA,EAAKK,KAAK,KAAM,MAEzBU,OAAQ,SAAUZ,GAOT,OANF,KAAKC,SAASD,GAGZS,KAAAA,OAAOT,GAFPD,KAAAA,IAAIC,GAKJ,KAAKC,SAASD,KAIzBZ,OAAOU,aAAeA,EAEON,EAUTqB,YAAYhC,UAVEY,EAUS,YAVHC,EAUgB,WAC/C,OAAA,IAAII,EAAa,OAVpBgB,OAAOC,eACTD,OAAOC,eAAevB,EAAKC,EAAM,CAC/BuB,IAAKtB,IAGPF,EAAIyB,iBAAiBxB,EAAMC,GApDtBI,SAAAA,EAAaK,GACfA,KAAAA,GAAKA,EAIL,IADDe,IAAAA,EAAUf,EAAGC,UAAUe,QAAQ,aAAc,IAAIC,MAAM,OAClDV,EAAI,EAAGA,EAAIQ,EAAQP,OAAQD,IAClCf,EAAKO,KAAK,KAAMgB,EAAQR,KAjB9B;;CCAC,WAGM,IAFDW,IAAAA,EAAW,EACXC,EAAU,CAAC,SAAU,OAChBC,EAAI,EAAGA,EAAID,EAAQX,SAAWvB,OAAOoC,wBAAyBD,EACrEnC,OAAOoC,sBAAwBpC,OAAOkC,EAAQC,GAAK,yBACnDnC,OAAOqC,qBAAuBrC,OAAOkC,EAAQC,GAAK,yBAChDnC,OAAOkC,EAAQC,GAAK,+BAGnBnC,OAAOoC,wBACVpC,OAAOoC,sBAAwB,SAAUE,GACnCC,IAAAA,GAAW,IAAIC,MAAOC,UACtBC,EAAaC,KAAKC,IAAI,EAAG,IAAML,EAAWN,IAC1CY,EAAK7C,OAAO8C,WAAW,WACzBR,EAASC,EAAWG,IAEtBA,GAEOG,OADPZ,EAAWM,EAAWG,EACfG,IAIN7C,OAAOqC,uBACVrC,OAAOqC,qBAAuB,SAAUQ,GACtCE,aAAaF,KAxBlB;;AC2ID,aA3IO,SAASG,IACTC,KAAAA,OAAS,GAEVjD,OAAOkD,UAAUC,kBAEdC,KAAAA,gBAAqB,gBACrBC,KAAAA,eAAqB,gBACrBC,KAAAA,cAAqB,gBAErBF,KAAAA,gBAAqB,aACrBC,KAAAA,eAAqB,YACrBC,KAAAA,cAAqB,YAGvBC,KAAAA,SA6HP,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,qBAAA,EA1HAP,EAAqBvD,UAAU+D,GAAK,SAAUC,EAAOnB,GAC9C,KAAKW,OAAOQ,KACVR,KAAAA,OAAOQ,GAAS,IAElBR,KAAAA,OAAOQ,GAAOlD,KAAK+B,IAG1BU,EAAqBvD,UAAUiE,KAAO,SAAUD,EAAOE,GACjDC,IAAAA,EAAY,KAAKX,OAAOQ,GACxBG,GACFA,EAAUC,QAAQ,SAAUvB,GAC1BA,EAASqB,MAKfX,EAAqBvD,UAAU8D,OAAS,WAClC3D,IA0CAkE,EAAmBC,EA1CnBnE,EAAO,KAEPoE,EAAM,CACJ,GAAA,EACA,GAAA,EACA,GAAA,EACA,GAAA,EACA,GAAA,EACA,GAAA,EACA,GAAA,EACA,GAAA,EACA,GAAA,EACA,GAAA,EACA,GAAA,EACA,GAAA,GAIN9D,SAAS+D,iBAAiB,UAAW,SAAUR,GACzCS,IAAAA,EAAYT,EAAMU,QAAUV,EAAMW,SAAWX,EAAMY,SACvCZ,EAAMa,SAClBC,EAAYP,EAAIP,EAAMe,OAErBN,QACYO,IAAXF,IACFd,EAAMiB,iBACN9E,EAAK8D,KAAK,OAAQa,IAKjBL,GAA6B,KAAhBT,EAAMe,OACtB5E,EAAK+E,QAAQ7D,KAAKlB,EAAM6D,KAKvBmB,KAAAA,gBAAgB,gBAAiB,KAAKD,SACtCC,KAAAA,gBAAgB,kBAAmB,KAAKD,SACxCC,KAAAA,gBAAgB,uBAAwB,KAAKC,aAI9CC,IAAAA,EAAgB5E,SAAS6E,uBAAuB,kBAAkB,GAEtED,EAAcb,iBAAiB,KAAKb,gBAAiB,SAAUK,IACvDzD,OAAOkD,UAAUC,kBAAoBM,EAAMuB,QAAQzD,OAAS,GAC9DkC,EAAMwB,cAAc1D,OAAS,IAI7BvB,OAAOkD,UAAUC,kBACnBW,EAAoBL,EAAMyB,MAC1BnB,EAAoBN,EAAM0B,QAE1BrB,EAAoBL,EAAMuB,QAAQ,GAAGI,QACrCrB,EAAoBN,EAAMuB,QAAQ,GAAGK,SAGvC5B,EAAMiB,oBAGRI,EAAcb,iBAAiB,KAAKZ,eAAgB,SAAUI,GAC5DA,EAAMiB,mBAGRI,EAAcb,iBAAiB,KAAKX,cAAe,SAAUG,GACtD,MAACzD,OAAOkD,UAAUC,kBAAoBM,EAAMuB,QAAQzD,OAAS,GAC9DkC,EAAMwB,cAAc1D,OAAS,GAD5B,CAKD+D,IAAAA,EAAiBC,EAEjBvF,OAAOkD,UAAUC,kBACnBmC,EAAkB7B,EAAMyB,MACxBK,EAAkB9B,EAAM0B,QAExBG,EAAkB7B,EAAM+B,eAAe,GAAGJ,QAC1CG,EAAkB9B,EAAM+B,eAAe,GAAGH,SAGxCI,IAAAA,EAAKH,EAAkBxB,EACvB4B,EAAQ/C,KAAKgD,IAAIF,GAEjBG,EAAKL,EAAkBxB,EACvB8B,EAAQlD,KAAKgD,IAAIC,GAEjBjD,KAAKC,IAAI8C,EAAOG,GAAS,IAE3BjG,EAAK8D,KAAK,OAAQgC,EAAQG,EAASJ,EAAK,EAAI,EAAI,EAAMG,EAAK,EAAI,EAAI,OAKzE5C,EAAqBvD,UAAUkF,QAAU,SAAUlB,GACjDA,EAAMiB,iBACDhB,KAAAA,KAAK,YAGZV,EAAqBvD,UAAUoF,YAAc,SAAUpB,GACrDA,EAAMiB,iBACDhB,KAAAA,KAAK,gBAGZV,EAAqBvD,UAAUmF,gBAAkB,SAAUkB,EAAUC,GAC/DC,IAAAA,EAAS9F,SAAS+F,cAAcH,GACpCE,EAAO/B,iBAAiB,QAAS8B,EAAGrG,KAAK,OACzCsG,EAAO/B,iBAAiB,KAAKX,cAAeyC,EAAGrG,KAAK;;ACRtD,aAtIO,SAASwG,IACTC,KAAAA,cAAmBjG,SAAS+F,cAAc,mBAC1CG,KAAAA,eAAmBlG,SAAS+F,cAAc,oBAC1CI,KAAAA,cAAmBnG,SAAS+F,cAAc,mBAC1CK,KAAAA,iBAAmBpG,SAAS+F,cAAc,iBAE1CM,KAAAA,MAAQ,EAgIf,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EA7HAL,EAAazG,UAAU+G,QAAU,SAAUC,EAAMC,GAC3C9G,IAAAA,EAAO,KAEXI,OAAOoC,sBAAsB,WAC3BxC,EAAK+G,eAAe/G,EAAKuG,eAEzBM,EAAKG,MAAM/C,QAAQ,SAAUgD,GAC3BA,EAAOhD,QAAQ,SAAUiD,GACnBA,GACFlH,EAAKmH,QAAQD,OAKnBlH,EAAKoH,YAAYN,EAASH,OAC1B3G,EAAKqH,gBAAgBP,EAASQ,WAE1BR,EAASS,aACPT,EAASU,KACXxH,EAAKyH,SAAQ,GACJX,EAASY,KAClB1H,EAAKyH,SAAQ,OAQrBnB,EAAazG,UAAU8H,aAAe,WAC/BC,KAAAA,gBAGPtB,EAAazG,UAAUkH,eAAiB,SAAUc,GACzCA,KAAAA,EAAUC,YACfD,EAAUE,YAAYF,EAAUC,aAIpCxB,EAAazG,UAAUsH,QAAU,SAAUa,GACrChI,IAAAA,EAAO,KAEPiI,EAAY3H,SAAS4H,cAAc,OACnCC,EAAY7H,SAAS4H,cAAc,OACnCE,EAAYJ,EAAKK,kBAAoB,CAAE9F,EAAGyF,EAAKzF,EAAG+F,EAAGN,EAAKM,GAC1DC,EAAgB,KAAKA,cAAcH,GAGnClG,EAAU,CAAC,OAAQ,QAAU8F,EAAKQ,MAAOD,GAEzCP,EAAKQ,MAAQ,MAAMtG,EAAQvB,KAAK,cAE/B8H,KAAAA,aAAaR,EAAS/F,GAE3BiG,EAAMO,UAAU3H,IAAI,cAGhBiH,EAAKK,iBAEPjI,OAAOoC,sBAAsB,WAC3BN,EAAQ,GAAKlC,EAAKuI,cAAc,CAAEhG,EAAGyF,EAAKzF,EAAG+F,EAAGN,EAAKM,IACrDtI,EAAKyI,aAAaR,EAAS/F,KAEpB8F,EAAKW,YACdzG,EAAQvB,KAAK,eACR8H,KAAAA,aAAaR,EAAS/F,GAG3B8F,EAAKW,WAAW1E,QAAQ,SAAU2E,GAChC5I,EAAKmH,QAAQyB,OAGf1G,EAAQvB,KAAK,YACR8H,KAAAA,aAAaR,EAAS/F,IAI7B+F,EAAQY,YAAYV,GAGf5B,KAAAA,cAAcsC,YAAYZ,IAGjC3B,EAAazG,UAAU4I,aAAe,SAAUK,EAAS5G,GACvD4G,EAAQC,aAAa,QAAS7G,EAAQrB,KAAK,OAG7CyF,EAAazG,UAAUmJ,kBAAoB,SAAUZ,GAC5C,MAAA,CAAE7F,EAAG6F,EAAS7F,EAAI,EAAG+F,EAAGF,EAASE,EAAI,IAG9ChC,EAAazG,UAAU0I,cAAgB,SAAUH,GAExC,MAAA,kBADPA,EAAW,KAAKY,kBAAkBZ,IACC7F,EAAI,IAAM6F,EAASE,GAGxDhC,EAAazG,UAAUuH,YAAc,SAAUT,GACxCI,KAAAA,eAAe,KAAKP,gBAErByC,IAAAA,EAAatC,EAAQ,KAAKA,MAK1BsC,GAJCtC,KAAAA,MAAQA,EAERH,KAAAA,eAAe0C,YAAc,KAAKvC,MAEnCsC,EAAa,EAAG,CACdE,IAAAA,EAAW7I,SAAS4H,cAAc,OACtCiB,EAAST,UAAU3H,IAAI,kBACvBoI,EAASD,YAAc,IAAMD,EAExBzC,KAAAA,eAAeqC,YAAYM,KAIpC7C,EAAazG,UAAUwH,gBAAkB,SAAUC,GAC5Cb,KAAAA,cAAcyC,YAAc5B,GAGnChB,EAAazG,UAAU4H,QAAU,SAAUC,GACrC0B,IAAAA,EAAU1B,EAAM,WAAa,YAC7BD,EAAUC,EAAM,WAAa,aAE5BhB,KAAAA,iBAAiBgC,UAAU3H,IAAIqI,GAC/B1C,KAAAA,iBAAiB2C,qBAAqB,KAAK,GAAGH,YAAczB,GAGnEnB,EAAazG,UAAU+H,aAAe,WAE/BlB,KAAAA,iBAAiBgC,UAAUjH,OAAO,YAClCiF,KAAAA,iBAAiBgC,UAAUjH,OAAO;;AC7EzC,aAxCO,SAAS6H,IACTC,KAAAA,aAAmB,YACnBC,KAAAA,aAAmB,YAEpBC,IAAAA,EAAY,KAAKC,wBAChBC,KAAAA,QAAUF,EAAYrJ,OAAOwJ,aAAexJ,OAAOyJ,YAmC1D,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,oBAAA,EA5DAzJ,OAAOyJ,YAAc,CACnBC,MAAO,GAEPC,QAAS,SAAU9G,EAAI+G,GACd,OAAA,KAAKF,MAAM7G,GAAMgH,OAAOD,IAGjCE,QAAS,SAAUjH,GACV,OAAA,KAAK6G,MAAMK,eAAelH,GAAM,KAAK6G,MAAM7G,QAAM4B,GAG1DuF,WAAY,SAAUnH,GACb,cAAO,KAAK6G,MAAM7G,IAG3BoH,MAAO,WACE,OAAA,KAAKP,MAAQ,KAYxBR,EAAoBzJ,UAAU6J,sBAAwB,WAGhD,IACEC,IAAAA,EAAUvJ,OAAOwJ,aAGd,OAFPD,EAAQI,QAJI,OAIa,KACzBJ,EAAQS,WALI,SAML,EACP,MAAOE,GACA,OAAA,IAKXhB,EAAoBzJ,UAAU0K,aAAe,WACpC,OAAA,KAAKZ,QAAQO,QAAQ,KAAKX,eAAiB,GAGpDD,EAAoBzJ,UAAU2K,aAAe,SAAU7D,GAChDgD,KAAAA,QAAQI,QAAQ,KAAKR,aAAc5C,IAI1C2C,EAAoBzJ,UAAU4K,aAAe,WACvCC,IAAAA,EAAY,KAAKf,QAAQO,QAAQ,KAAKV,cACnCkB,OAAAA,EAAYC,KAAKC,MAAMF,GAAa,MAG7CpB,EAAoBzJ,UAAUgL,aAAe,SAAUC,GAChDnB,KAAAA,QAAQI,QAAQ,KAAKP,aAAcmB,KAAKI,UAAUD,KAGzDxB,EAAoBzJ,UAAUmL,eAAiB,WACxCrB,KAAAA,QAAQS,WAAW,KAAKZ;;AC3C/B,aAlBO,SAASyB,EAAK7C,EAAUI,GACxBjG,KAAAA,EAAmB6F,EAAS7F,EAC5B+F,KAAAA,EAAmBF,EAASE,EAC5BE,KAAAA,MAAmBA,GAAS,EAE5BH,KAAAA,iBAAmB,KACnBM,KAAAA,WAAmB,KAY1B,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,KAAA,EATAsC,EAAKpL,UAAUqL,aAAe,WACvB7C,KAAAA,iBAAmB,CAAE9F,EAAG,KAAKA,EAAG+F,EAAG,KAAKA,IAG/C2C,EAAKpL,UAAUsL,eAAiB,SAAU/C,GACnC7F,KAAAA,EAAI6F,EAAS7F,EACb+F,KAAAA,EAAIF,EAASE,GAGpB2C,EAAKpL,UAAUuL,UAAY,WAClB,MAAA,CACLhD,SAAU,CACR7F,EAAG,KAAKA,EACR+F,EAAG,KAAKA,GAEVE,MAAO,KAAKA;;AC8EhB,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,KAAA,EAtGA,IAAA,EAAA,QAAA,UACO,SAAS6C,EAAKC,EAAMC,GACpBD,KAAAA,KAAOA,EACPtE,KAAAA,MAAQuE,EAAgB,KAAKC,UAAUD,GAAiB,KAAKE,QAIpEJ,EAAKxL,UAAU4L,MAAQ,WAGhB,IAFDzE,IAAAA,EAAQ,GAEHzE,EAAI,EAAGA,EAAI,KAAK+I,KAAM/I,IAGxB,IAFDmJ,IAAAA,EAAM1E,EAAMzE,GAAK,GAEZ+F,EAAI,EAAGA,EAAI,KAAKgD,KAAMhD,IAC7BoD,EAAI/K,KAAK,MAINqG,OAAAA,GAGTqE,EAAKxL,UAAU2L,UAAY,SAAUG,GAG9B,IAFD3E,IAAAA,EAAQ,GAEHzE,EAAI,EAAGA,EAAI,KAAK+I,KAAM/I,IAGxB,IAFDmJ,IAAAA,EAAM1E,EAAMzE,GAAK,GAEZ+F,EAAI,EAAGA,EAAI,KAAKgD,KAAMhD,IAAK,CAC9BN,IAAAA,EAAO2D,EAAMpJ,GAAG+F,GACpBoD,EAAI/K,KAAKqH,EAAO,IAAIiD,EAAJ,KAASjD,EAAKI,SAAUJ,EAAKQ,OAAS,MAInDxB,OAAAA,GAITqE,EAAKxL,UAAU+L,oBAAsB,WAC/B5E,IAAAA,EAAQ,KAAK6E,iBAEb7E,GAAAA,EAAMrF,OACDqF,OAAAA,EAAMjE,KAAK+I,MAAM/I,KAAKgJ,SAAW/E,EAAMrF,UAIlD0J,EAAKxL,UAAUgM,eAAiB,WAC1B7E,IAAAA,EAAQ,GAQLA,OANFgF,KAAAA,SAAS,SAAUzJ,EAAG+F,EAAGN,GACvBA,GACHhB,EAAMrG,KAAK,CAAE4B,EAAGA,EAAG+F,EAAGA,MAInBtB,GAITqE,EAAKxL,UAAUmM,SAAW,SAAUtJ,GAC7B,IAAA,IAAIH,EAAI,EAAGA,EAAI,KAAK+I,KAAM/I,IACxB,IAAA,IAAI+F,EAAI,EAAGA,EAAI,KAAKgD,KAAMhD,IAC7B5F,EAASH,EAAG+F,EAAG,KAAKtB,MAAMzE,GAAG+F,KAMnC+C,EAAKxL,UAAUoM,eAAiB,WACvB,QAAE,KAAKJ,iBAAiBlK,QAIjC0J,EAAKxL,UAAUqM,cAAgB,SAAUhF,GAChC,OAAC,KAAKiF,aAAajF,IAG5BmE,EAAKxL,UAAUsM,aAAe,SAAUjF,GAC/B,QAAE,KAAKkF,YAAYlF,IAG5BmE,EAAKxL,UAAUuM,YAAc,SAAUlF,GACjC,OAAA,KAAKmF,aAAanF,GACb,KAAKF,MAAME,EAAK3E,GAAG2E,EAAKoB,GAExB,MAKX+C,EAAKxL,UAAUyM,WAAa,SAAUtE,GAC/BhB,KAAAA,MAAMgB,EAAKzF,GAAGyF,EAAKM,GAAKN,GAG/BqD,EAAKxL,UAAU0M,WAAa,SAAUvE,GAC/BhB,KAAAA,MAAMgB,EAAKzF,GAAGyF,EAAKM,GAAK,MAG/B+C,EAAKxL,UAAUwM,aAAe,SAAUjE,GAC/BA,OAAAA,EAAS7F,GAAK,GAAK6F,EAAS7F,EAAI,KAAK+I,MACrClD,EAASE,GAAK,GAAKF,EAASE,EAAI,KAAKgD,MAG9CD,EAAKxL,UAAUuL,UAAY,WAGpB,IAFDoB,IAAAA,EAAY,GAEPjK,EAAI,EAAGA,EAAI,KAAK+I,KAAM/I,IAGxB,IAFDmJ,IAAAA,EAAMc,EAAUjK,GAAK,GAEhB+F,EAAI,EAAGA,EAAI,KAAKgD,KAAMhD,IAC7BoD,EAAI/K,KAAK,KAAKqG,MAAMzE,GAAG+F,GAAK,KAAKtB,MAAMzE,GAAG+F,GAAG8C,YAAc,MAIxD,MAAA,CACLE,KAAM,KAAKA,KACXtE,MAAOwF;;AC4JX,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,YAAA,EA/QA,IAAA,EAAA,QAAA,UACA,EAAA,QAAA,UACO,SAASC,EAAYnB,EAAMoB,EAAcC,EAAUC,GACnDtB,KAAAA,KAAiBA,EACjBuB,KAAAA,aAAiB,IAAIH,EACrBI,KAAAA,eAAiB,IAAIF,EACrBG,KAAAA,SAAiB,IAAIJ,EAErBK,KAAAA,WAAiB,EAEjBH,KAAAA,aAAajJ,GAAG,OAAQ,KAAKqJ,KAAKnN,KAAK,OACvC+M,KAAAA,aAAajJ,GAAG,UAAW,KAAKmB,QAAQjF,KAAK,OAC7C+M,KAAAA,aAAajJ,GAAG,cAAe,KAAKqB,YAAYnF,KAAK,OAErDoN,KAAAA,QAIPT,EAAY5M,UAAUkF,QAAU,WACzB+H,KAAAA,eAAe9B,iBACf+B,KAAAA,SAASpF,eACTuF,KAAAA,SAIPT,EAAY5M,UAAUoF,YAAc,WAC7BA,KAAAA,aAAc,EACd8H,KAAAA,SAASpF,gBAIhB8E,EAAY5M,UAAUsN,iBAAmB,WAChC,OAAA,KAAK3F,MAAS,KAAKE,MAAQ,KAAKzC,aAIzCwH,EAAY5M,UAAUqN,MAAQ,WACxB3B,IAAAA,EAAgB,KAAKuB,eAAerC,eAGpCc,GACG1E,KAAAA,KAAc,IAAIwE,EAAJ,KAASE,EAAc1E,KAAKyE,KACnBC,EAAc1E,KAAKG,OAC1CL,KAAAA,MAAc4E,EAAc5E,MAC5Ba,KAAAA,KAAc+D,EAAc/D,KAC5BE,KAAAA,IAAc6D,EAAc7D,IAC5BzC,KAAAA,YAAcsG,EAActG,cAE5B4B,KAAAA,KAAc,IAAIwE,EAAJ,KAAS,KAAKC,MAC5B3E,KAAAA,MAAc,EACda,KAAAA,MAAc,EACdE,KAAAA,KAAc,EACdzC,KAAAA,aAAc,EAGdmI,KAAAA,iBAIFxG,KAAAA,WAIP6F,EAAY5M,UAAUuN,cAAgB,WAC/B,IAAA,IAAI1L,EAAI,EAAGA,EAAI,KAAKsL,WAAYtL,IAC9B2L,KAAAA,iBAKTZ,EAAY5M,UAAUwN,cAAgB,WAChC,GAAA,KAAKxG,KAAKoF,iBAAkB,CAC1BzD,IAAAA,EAAQzF,KAAKgJ,SAAW,GAAM,EAAI,EAClC/D,EAAO,IAAIiD,EAAJ,KAAS,KAAKpE,KAAK+E,sBAAuBpD,GAEhD3B,KAAAA,KAAKyF,WAAWtE,KAKzByE,EAAY5M,UAAU+G,QAAU,WAC1B,KAAKkG,eAAevC,eAAiB,KAAK5D,OACvCmG,KAAAA,eAAetC,aAAa,KAAK7D,OAIpC,KAAKa,KACFsF,KAAAA,eAAe9B,iBAEf8B,KAAAA,eAAejC,aAAa,KAAKO,aAGnC2B,KAAAA,SAASnG,QAAQ,KAAKC,KAAM,CAC/BF,MAAY,KAAKA,MACjBa,KAAY,KAAKA,KACjBE,IAAY,KAAKA,IACjBJ,UAAY,KAAKwF,eAAevC,eAChChD,WAAY,KAAK4F,sBAMrBV,EAAY5M,UAAUuL,UAAY,WACzB,MAAA,CACLvE,KAAa,KAAKA,KAAKuE,YACvBzE,MAAa,KAAKA,MAClBa,KAAa,KAAKA,KAClBE,IAAa,KAAKA,IAClBzC,YAAa,KAAKA,cAKtBwH,EAAY5M,UAAUyN,aAAe,WAC9BzG,KAAAA,KAAKmF,SAAS,SAAUzJ,EAAG+F,EAAGN,GAC7BA,IACFA,EAAKW,WAAa,KAClBX,EAAKkD,mBAMXuB,EAAY5M,UAAU0N,SAAW,SAAUvF,EAAMd,GAC1CL,KAAAA,KAAKG,MAAMgB,EAAKzF,GAAGyF,EAAKM,GAAK,KAC7BzB,KAAAA,KAAKG,MAAME,EAAK3E,GAAG2E,EAAKoB,GAAKN,EAClCA,EAAKmD,eAAejE,IAItBuF,EAAY5M,UAAUoN,KAAO,SAAUO,GAEjCxN,IAAAA,EAAO,KAEP,IAAA,KAAKmN,mBAAL,CAEAjG,IAAAA,EAAMc,EAENyF,EAAa,KAAKC,UAAUF,GAC5BG,EAAa,KAAKC,gBAAgBH,GAClCI,GAAa,EAGZP,KAAAA,eAGLK,EAAWpL,EAAE0B,QAAQ,SAAU1B,GAC7BoL,EAAWrF,EAAErE,QAAQ,SAAUqE,GAIzBN,GAHJd,EAAO,CAAE3E,EAAGA,EAAG+F,EAAGA,GAClBN,EAAOhI,EAAK6G,KAAKuF,YAAYlF,GAEnB,CACJ4G,IAAAA,EAAY9N,EAAK+N,qBAAqB7G,EAAMuG,GAC5CO,EAAYhO,EAAK6G,KAAKuF,YAAY0B,EAAUE,MAG5CA,GAAAA,GAAQA,EAAKxF,QAAUR,EAAKQ,QAAUwF,EAAKrF,WAAY,CACrDC,IAAAA,EAAS,IAAIqC,EAAJ,KAAS6C,EAAUE,KAAmB,EAAbhG,EAAKQ,OAC3CI,EAAOD,WAAa,CAACX,EAAMgG,GAE3BhO,EAAK6G,KAAKyF,WAAW1D,GACrB5I,EAAK6G,KAAK0F,WAAWvE,GAGrBA,EAAKmD,eAAe2C,EAAUE,MAG9BhO,EAAK2G,OAASiC,EAAOJ,MAGA,OAAjBI,EAAOJ,QAAgBxI,EAAK0H,KAAM,QAEtC1H,EAAKuN,SAASvF,EAAM8F,EAAUG,UAG3BjO,EAAKkO,eAAehH,EAAMc,KAC7B6F,GAAQ,QAMZA,IACGR,KAAAA,gBAEA,KAAKc,mBACH3G,KAAAA,MAAO,GAGTZ,KAAAA,aAKT6F,EAAY5M,UAAU6N,UAAY,SAAUF,GASnCpJ,MAPG,CACL,EAAA,CAAE7B,EAAG,EAAI+F,GAAI,GACb,EAAA,CAAE/F,EAAG,EAAI+F,EAAG,GACZ,EAAA,CAAE/F,EAAG,EAAI+F,EAAG,GACZ,EAAA,CAAE/F,GAAI,EAAG+F,EAAG,IAGNkF,IAIbf,EAAY5M,UAAU+N,gBAAkB,SAAUH,GAG3C,IAFDE,IAAAA,EAAa,CAAEpL,EAAG,GAAI+F,EAAG,IAEpB8F,EAAM,EAAGA,EAAM,KAAK9C,KAAM8C,IACjCT,EAAWpL,EAAE5B,KAAKyN,GAClBT,EAAWrF,EAAE3H,KAAKyN,GAObT,OAHU,IAAbF,EAAOlL,IAASoL,EAAWpL,EAAIoL,EAAWpL,EAAE8L,WAC/B,IAAbZ,EAAOnF,IAASqF,EAAWrF,EAAIqF,EAAWrF,EAAE+F,WAEzCV,GAGTlB,EAAY5M,UAAUkO,qBAAuB,SAAU7G,EAAMuG,GACvDa,IAAAA,EAGD,GAEDpH,EAAW,CAAE3E,GADb+L,EAAWpH,GACc3E,EAAIkL,EAAOlL,EAAG+F,EAAGgG,EAAShG,EAAImF,EAAOnF,SACvD,KAAKzB,KAAKwF,aAAanF,IACvB,KAAKL,KAAKqF,cAAchF,IAE1B,MAAA,CACL+G,SAAUK,EACVN,KAAM9G,IAIVuF,EAAY5M,UAAUsO,eAAiB,WAC9B,OAAA,KAAKtH,KAAKoF,kBAAoB,KAAKsC,wBAI5C9B,EAAY5M,UAAU0O,qBAAuB,WAKtC,IAJDvO,IAEAgI,EAEKzF,EAAI,EAAGA,EAAI,KAAK+I,KAAM/I,IACxB,IAAA,IAAI+F,EAAI,EAAGA,EAAI,KAAKgD,KAAMhD,IAGzBN,GAFJA,EAAO,KAAKnB,KAAKuF,YAAY,CAAE7J,EAAGA,EAAG+F,EAAGA,IAGjC,IAAA,IAAIkF,EAAY,EAAGA,EAAY,EAAGA,IAAa,CAC9CC,IAAAA,EAVD,KAUeC,UAAUF,GACxBtG,EAAS,CAAE3E,EAAGA,EAAIkL,EAAOlL,EAAG+F,EAAGA,EAAImF,EAAOnF,GAE1CkG,EAbD,KAae3H,KAAKuF,YAAYlF,GAE/BsH,GAAAA,GAASA,EAAMhG,QAAUR,EAAKQ,MACzB,OAAA,EAOV,OAAA,GAGTiE,EAAY5M,UAAUqO,eAAiB,SAAUO,EAAOC,GAC/CD,OAAAA,EAAMlM,IAAMmM,EAAOnM,GAAKkM,EAAMnG,IAAMoG,EAAOpG;;ACvQpD,aATA,QAAA,mBACA,QAAA,wBACA,QAAA,wBACA,IAAA,EAAA,QAAA,4BACA,EAAA,QAAA,mBACA,EAAA,QAAA,2BACA,EAAA,QAAA,kBAGAlI,OAAOoC,sBAAsB,WACvBiK,IAAAA,EAAJ,YAAgB,EAAGrJ,EAAnB,qBAAyCkD,EAAzC,aAAuDgD,EAAvD","file":"application.8f07135a.js","sourceRoot":"..","sourcesContent":["Function.prototype.bind = Function.prototype.bind || function (target) {\r\n  var self = this;\r\n  return function (args) {\r\n    if (!(args instanceof Array)) {\r\n      args = [args];\r\n    }\r\n    self.apply(target, args);\r\n  };\r\n};\r\n","(function () {\r\n  if (typeof window.Element === \"undefined\" ||\r\n      \"classList\" in document.documentElement) {\r\n    return;\r\n  }\r\n\r\n  var prototype = Array.prototype,\r\n      push = prototype.push,\r\n      splice = prototype.splice,\r\n      join = prototype.join;\r\n\r\n  function DOMTokenList(el) {\r\n    this.el = el;\r\n    // The className needs to be trimmed and split on whitespace\r\n    // to retrieve a list of classes.\r\n    var classes = el.className.replace(/^\\s+|\\s+$/g, '').split(/\\s+/);\r\n    for (var i = 0; i < classes.length; i++) {\r\n      push.call(this, classes[i]);\r\n    }\r\n  }\r\n\r\n  DOMTokenList.prototype = {\r\n    add: function (token) {\r\n      if (this.contains(token)) return;\r\n      push.call(this, token);\r\n      this.el.className = this.toString();\r\n    },\r\n    contains: function (token) {\r\n      return this.el.className.indexOf(token) != -1;\r\n    },\r\n    item: function (index) {\r\n      return this[index] || null;\r\n    },\r\n    remove: function (token) {\r\n      if (!this.contains(token)) return;\r\n      for (var i = 0; i < this.length; i++) {\r\n        if (this[i] == token) break;\r\n      }\r\n      splice.call(this, i, 1);\r\n      this.el.className = this.toString();\r\n    },\r\n    toString: function () {\r\n      return join.call(this, ' ');\r\n    },\r\n    toggle: function (token) {\r\n      if (!this.contains(token)) {\r\n        this.add(token);\r\n      } else {\r\n        this.remove(token);\r\n      }\r\n\r\n      return this.contains(token);\r\n    }\r\n  };\r\n\r\n  window.DOMTokenList = DOMTokenList;\r\n\r\n  function defineElementGetter(obj, prop, getter) {\r\n    if (Object.defineProperty) {\r\n      Object.defineProperty(obj, prop, {\r\n        get: getter\r\n      });\r\n    } else {\r\n      obj.__defineGetter__(prop, getter);\r\n    }\r\n  }\r\n\r\n  defineElementGetter(HTMLElement.prototype, 'classList', function () {\r\n    return new DOMTokenList(this);\r\n  });\r\n})();\r\n","(function () {\r\n  var lastTime = 0;\r\n  var vendors = ['webkit', 'moz'];\r\n  for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\r\n    window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\r\n    window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] ||\r\n      window[vendors[x] + 'CancelRequestAnimationFrame'];\r\n  }\r\n\r\n  if (!window.requestAnimationFrame) {\r\n    window.requestAnimationFrame = function (callback) {\r\n      var currTime = new Date().getTime();\r\n      var timeToCall = Math.max(0, 16 - (currTime - lastTime));\r\n      var id = window.setTimeout(function () {\r\n        callback(currTime + timeToCall);\r\n      },\r\n      timeToCall);\r\n      lastTime = currTime + timeToCall;\r\n      return id;\r\n    };\r\n  }\r\n\r\n  if (!window.cancelAnimationFrame) {\r\n    window.cancelAnimationFrame = function (id) {\r\n      clearTimeout(id);\r\n    };\r\n  }\r\n}());\r\n","export function KeyboardInputManager() {\r\n  this.events = {};\r\n\r\n  if (window.navigator.msPointerEnabled) {\r\n    //Internet Explorer 10 style\r\n    this.eventTouchstart    = \"MSPointerDown\";\r\n    this.eventTouchmove     = \"MSPointerMove\";\r\n    this.eventTouchend      = \"MSPointerUp\";\r\n  } else {\r\n    this.eventTouchstart    = \"touchstart\";\r\n    this.eventTouchmove     = \"touchmove\";\r\n    this.eventTouchend      = \"touchend\";\r\n  }\r\n\r\n  this.listen();\r\n}\r\n\r\nKeyboardInputManager.prototype.on = function (event, callback) {\r\n  if (!this.events[event]) {\r\n    this.events[event] = [];\r\n  }\r\n  this.events[event].push(callback);\r\n};\r\n\r\nKeyboardInputManager.prototype.emit = function (event, data) {\r\n  var callbacks = this.events[event];\r\n  if (callbacks) {\r\n    callbacks.forEach(function (callback) {\r\n      callback(data);\r\n    });\r\n  }\r\n};\r\n\r\nKeyboardInputManager.prototype.listen = function () {\r\n  var self = this;\r\n\r\n  var map = {\r\n    38: 0, // Up\r\n    39: 1, // Right\r\n    40: 2, // Down\r\n    37: 3, // Left\r\n    75: 0, // Vim up\r\n    76: 1, // Vim right\r\n    74: 2, // Vim down\r\n    72: 3, // Vim left\r\n    87: 0, // W\r\n    68: 1, // D\r\n    83: 2, // S\r\n    65: 3  // A\r\n  };\r\n\r\n  // Respond to direction keys\r\n  document.addEventListener(\"keydown\", function (event) {\r\n    var modifiers = event.altKey || event.ctrlKey || event.metaKey ||\r\n                    event.shiftKey;\r\n    var mapped    = map[event.which];\r\n\r\n    if (!modifiers) {\r\n      if (mapped !== undefined) {\r\n        event.preventDefault();\r\n        self.emit(\"move\", mapped);\r\n      }\r\n    }\r\n\r\n    // R key restarts the game\r\n    if (!modifiers && event.which === 82) {\r\n      self.restart.call(self, event);\r\n    }\r\n  });\r\n\r\n  // Respond to button presses\r\n  this.bindButtonPress(\".retry-button\", this.restart);\r\n  this.bindButtonPress(\".restart-button\", this.restart);\r\n  this.bindButtonPress(\".keep-playing-button\", this.keepPlaying);\r\n\r\n  // Respond to swipe events\r\n  var touchStartClientX, touchStartClientY;\r\n  var gameContainer = document.getElementsByClassName(\"game-container\")[0];\r\n\r\n  gameContainer.addEventListener(this.eventTouchstart, function (event) {\r\n    if ((!window.navigator.msPointerEnabled && event.touches.length > 1) ||\r\n        event.targetTouches.length > 1) {\r\n      return; // Ignore if touching with more than 1 finger\r\n    }\r\n\r\n    if (window.navigator.msPointerEnabled) {\r\n      touchStartClientX = event.pageX;\r\n      touchStartClientY = event.pageY;\r\n    } else {\r\n      touchStartClientX = event.touches[0].clientX;\r\n      touchStartClientY = event.touches[0].clientY;\r\n    }\r\n\r\n    event.preventDefault();\r\n  });\r\n\r\n  gameContainer.addEventListener(this.eventTouchmove, function (event) {\r\n    event.preventDefault();\r\n  });\r\n\r\n  gameContainer.addEventListener(this.eventTouchend, function (event) {\r\n    if ((!window.navigator.msPointerEnabled && event.touches.length > 0) ||\r\n        event.targetTouches.length > 0) {\r\n      return; // Ignore if still touching with one or more fingers\r\n    }\r\n\r\n    var touchEndClientX, touchEndClientY;\r\n\r\n    if (window.navigator.msPointerEnabled) {\r\n      touchEndClientX = event.pageX;\r\n      touchEndClientY = event.pageY;\r\n    } else {\r\n      touchEndClientX = event.changedTouches[0].clientX;\r\n      touchEndClientY = event.changedTouches[0].clientY;\r\n    }\r\n\r\n    var dx = touchEndClientX - touchStartClientX;\r\n    var absDx = Math.abs(dx);\r\n\r\n    var dy = touchEndClientY - touchStartClientY;\r\n    var absDy = Math.abs(dy);\r\n\r\n    if (Math.max(absDx, absDy) > 10) {\r\n      // (right : left) : (down : up)\r\n      self.emit(\"move\", absDx > absDy ? (dx > 0 ? 1 : 3) : (dy > 0 ? 2 : 0));\r\n    }\r\n  });\r\n};\r\n\r\nKeyboardInputManager.prototype.restart = function (event) {\r\n  event.preventDefault();\r\n  this.emit(\"restart\");\r\n};\r\n\r\nKeyboardInputManager.prototype.keepPlaying = function (event) {\r\n  event.preventDefault();\r\n  this.emit(\"keepPlaying\");\r\n};\r\n\r\nKeyboardInputManager.prototype.bindButtonPress = function (selector, fn) {\r\n  var button = document.querySelector(selector);\r\n  button.addEventListener(\"click\", fn.bind(this));\r\n  button.addEventListener(this.eventTouchend, fn.bind(this));\r\n};\r\n","export function HTMLActuator() {\r\n  this.tileContainer    = document.querySelector(\".tile-container\");\r\n  this.scoreContainer   = document.querySelector(\".score-container\");\r\n  this.bestContainer    = document.querySelector(\".best-container\");\r\n  this.messageContainer = document.querySelector(\".game-message\");\r\n\r\n  this.score = 0;\r\n}\r\n\r\nHTMLActuator.prototype.actuate = function (grid, metadata) {\r\n  var self = this;\r\n\r\n  window.requestAnimationFrame(function () {\r\n    self.clearContainer(self.tileContainer);\r\n\r\n    grid.cells.forEach(function (column) {\r\n      column.forEach(function (cell) {\r\n        if (cell) {\r\n          self.addTile(cell);\r\n        }\r\n      });\r\n    });\r\n\r\n    self.updateScore(metadata.score);\r\n    self.updateBestScore(metadata.bestScore);\r\n\r\n    if (metadata.terminated) {\r\n      if (metadata.over) {\r\n        self.message(false); // You lose\r\n      } else if (metadata.won) {\r\n        self.message(true); // You win!\r\n      }\r\n    }\r\n\r\n  });\r\n};\r\n\r\n// Continues the game (both restart and keep playing)\r\nHTMLActuator.prototype.continueGame = function () {\r\n  this.clearMessage();\r\n};\r\n\r\nHTMLActuator.prototype.clearContainer = function (container) {\r\n  while (container.firstChild) {\r\n    container.removeChild(container.firstChild);\r\n  }\r\n};\r\n\r\nHTMLActuator.prototype.addTile = function (tile) {\r\n  var self = this;\r\n\r\n  var wrapper   = document.createElement(\"div\");\r\n  var inner     = document.createElement(\"div\");\r\n  var position  = tile.previousPosition || { x: tile.x, y: tile.y };\r\n  var positionClass = this.positionClass(position);\r\n\r\n  // We can't use classlist because it somehow glitches when replacing classes\r\n  var classes = [\"tile\", \"tile-\" + tile.value, positionClass];\r\n\r\n  if (tile.value > 2048) classes.push(\"tile-super\");\r\n\r\n  this.applyClasses(wrapper, classes);\r\n\r\n  inner.classList.add(\"tile-inner\");\r\n  // inner.textContent = tile.value;\r\n\r\n  if (tile.previousPosition) {\r\n    // Make sure that the tile gets rendered in the previous position first\r\n    window.requestAnimationFrame(function () {\r\n      classes[2] = self.positionClass({ x: tile.x, y: tile.y });\r\n      self.applyClasses(wrapper, classes); // Update the position\r\n    });\r\n  } else if (tile.mergedFrom) {\r\n    classes.push(\"tile-merged\");\r\n    this.applyClasses(wrapper, classes);\r\n\r\n    // Render the tiles that merged\r\n    tile.mergedFrom.forEach(function (merged) {\r\n      self.addTile(merged);\r\n    });\r\n  } else {\r\n    classes.push(\"tile-new\");\r\n    this.applyClasses(wrapper, classes);\r\n  }\r\n\r\n  // Add the inner part of the tile to the wrapper\r\n  wrapper.appendChild(inner);\r\n\r\n  // Put the tile on the board\r\n  this.tileContainer.appendChild(wrapper);\r\n};\r\n\r\nHTMLActuator.prototype.applyClasses = function (element, classes) {\r\n  element.setAttribute(\"class\", classes.join(\" \"));\r\n};\r\n\r\nHTMLActuator.prototype.normalizePosition = function (position) {\r\n  return { x: position.x + 1, y: position.y + 1 };\r\n};\r\n\r\nHTMLActuator.prototype.positionClass = function (position) {\r\n  position = this.normalizePosition(position);\r\n  return \"tile-position-\" + position.x + \"-\" + position.y;\r\n};\r\n\r\nHTMLActuator.prototype.updateScore = function (score) {\r\n  this.clearContainer(this.scoreContainer);\r\n\r\n  var difference = score - this.score;\r\n  this.score = score;\r\n\r\n  this.scoreContainer.textContent = this.score;\r\n\r\n  if (difference > 0) {\r\n    var addition = document.createElement(\"div\");\r\n    addition.classList.add(\"score-addition\");\r\n    addition.textContent = \"+\" + difference;\r\n\r\n    this.scoreContainer.appendChild(addition);\r\n  }\r\n};\r\n\r\nHTMLActuator.prototype.updateBestScore = function (bestScore) {\r\n  this.bestContainer.textContent = bestScore;\r\n};\r\n\r\nHTMLActuator.prototype.message = function (won) {\r\n  var type    = won ? \"game-won\" : \"game-over\";\r\n  var message = won ? \"You win!\" : \"Game over!\";\r\n\r\n  this.messageContainer.classList.add(type);\r\n  this.messageContainer.getElementsByTagName(\"p\")[0].textContent = message;\r\n};\r\n\r\nHTMLActuator.prototype.clearMessage = function () {\r\n  // IE only takes one value to remove at a time.\r\n  this.messageContainer.classList.remove(\"game-won\");\r\n  this.messageContainer.classList.remove(\"game-over\");\r\n};\r\n","window.fakeStorage = {\r\n  _data: {},\r\n\r\n  setItem: function (id, val) {\r\n    return this._data[id] = String(val);\r\n  },\r\n\r\n  getItem: function (id) {\r\n    return this._data.hasOwnProperty(id) ? this._data[id] : undefined;\r\n  },\r\n\r\n  removeItem: function (id) {\r\n    return delete this._data[id];\r\n  },\r\n\r\n  clear: function () {\r\n    return this._data = {};\r\n  }\r\n};\r\n\r\nexport function LocalStorageManager() {\r\n  this.bestScoreKey     = \"bestScore\";\r\n  this.gameStateKey     = \"gameState\";\r\n\r\n  var supported = this.localStorageSupported();\r\n  this.storage = supported ? window.localStorage : window.fakeStorage;\r\n}\r\n\r\nLocalStorageManager.prototype.localStorageSupported = function () {\r\n  var testKey = \"test\";\r\n\r\n  try {\r\n    var storage = window.localStorage;\r\n    storage.setItem(testKey, \"1\");\r\n    storage.removeItem(testKey);\r\n    return true;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n};\r\n\r\n// Best score getters/setters\r\nLocalStorageManager.prototype.getBestScore = function () {\r\n  return this.storage.getItem(this.bestScoreKey) || 0;\r\n};\r\n\r\nLocalStorageManager.prototype.setBestScore = function (score) {\r\n  this.storage.setItem(this.bestScoreKey, score);\r\n};\r\n\r\n// Game state getters/setters and clearing\r\nLocalStorageManager.prototype.getGameState = function () {\r\n  var stateJSON = this.storage.getItem(this.gameStateKey);\r\n  return stateJSON ? JSON.parse(stateJSON) : null;\r\n};\r\n\r\nLocalStorageManager.prototype.setGameState = function (gameState) {\r\n  this.storage.setItem(this.gameStateKey, JSON.stringify(gameState));\r\n};\r\n\r\nLocalStorageManager.prototype.clearGameState = function () {\r\n  this.storage.removeItem(this.gameStateKey);\r\n};\r\n","export function Tile(position, value) {\r\n  this.x                = position.x;\r\n  this.y                = position.y;\r\n  this.value            = value || 2;\r\n\r\n  this.previousPosition = null;\r\n  this.mergedFrom       = null; // Tracks tiles that merged together\r\n}\r\n\r\nTile.prototype.savePosition = function () {\r\n  this.previousPosition = { x: this.x, y: this.y };\r\n};\r\n\r\nTile.prototype.updatePosition = function (position) {\r\n  this.x = position.x;\r\n  this.y = position.y;\r\n};\r\n\r\nTile.prototype.serialize = function () {\r\n  return {\r\n    position: {\r\n      x: this.x,\r\n      y: this.y\r\n    },\r\n    value: this.value\r\n  };\r\n};\r\n","import { Tile } from './tile'\r\nexport function Grid(size, previousState) {\r\n  this.size = size;\r\n  this.cells = previousState ? this.fromState(previousState) : this.empty();\r\n}\r\n\r\n// Build a grid of the specified size\r\nGrid.prototype.empty = function () {\r\n  var cells = [];\r\n\r\n  for (var x = 0; x < this.size; x++) {\r\n    var row = cells[x] = [];\r\n\r\n    for (var y = 0; y < this.size; y++) {\r\n      row.push(null);\r\n    }\r\n  }\r\n\r\n  return cells;\r\n};\r\n\r\nGrid.prototype.fromState = function (state) {\r\n  var cells = [];\r\n\r\n  for (var x = 0; x < this.size; x++) {\r\n    var row = cells[x] = [];\r\n\r\n    for (var y = 0; y < this.size; y++) {\r\n      var tile = state[x][y];\r\n      row.push(tile ? new Tile(tile.position, tile.value) : null);\r\n    }\r\n  }\r\n\r\n  return cells;\r\n};\r\n\r\n// Find the first available random position\r\nGrid.prototype.randomAvailableCell = function () {\r\n  var cells = this.availableCells();\r\n\r\n  if (cells.length) {\r\n    return cells[Math.floor(Math.random() * cells.length)];\r\n  }\r\n};\r\n\r\nGrid.prototype.availableCells = function () {\r\n  var cells = [];\r\n\r\n  this.eachCell(function (x, y, tile) {\r\n    if (!tile) {\r\n      cells.push({ x: x, y: y });\r\n    }\r\n  });\r\n\r\n  return cells;\r\n};\r\n\r\n// Call callback for every cell\r\nGrid.prototype.eachCell = function (callback) {\r\n  for (var x = 0; x < this.size; x++) {\r\n    for (var y = 0; y < this.size; y++) {\r\n      callback(x, y, this.cells[x][y]);\r\n    }\r\n  }\r\n};\r\n\r\n// Check if there are any cells available\r\nGrid.prototype.cellsAvailable = function () {\r\n  return !!this.availableCells().length;\r\n};\r\n\r\n// Check if the specified cell is taken\r\nGrid.prototype.cellAvailable = function (cell) {\r\n  return !this.cellOccupied(cell);\r\n};\r\n\r\nGrid.prototype.cellOccupied = function (cell) {\r\n  return !!this.cellContent(cell);\r\n};\r\n\r\nGrid.prototype.cellContent = function (cell) {\r\n  if (this.withinBounds(cell)) {\r\n    return this.cells[cell.x][cell.y];\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\n// Inserts a tile at its position\r\nGrid.prototype.insertTile = function (tile) {\r\n  this.cells[tile.x][tile.y] = tile;\r\n};\r\n\r\nGrid.prototype.removeTile = function (tile) {\r\n  this.cells[tile.x][tile.y] = null;\r\n};\r\n\r\nGrid.prototype.withinBounds = function (position) {\r\n  return position.x >= 0 && position.x < this.size &&\r\n         position.y >= 0 && position.y < this.size;\r\n};\r\n\r\nGrid.prototype.serialize = function () {\r\n  var cellState = [];\r\n\r\n  for (var x = 0; x < this.size; x++) {\r\n    var row = cellState[x] = [];\r\n\r\n    for (var y = 0; y < this.size; y++) {\r\n      row.push(this.cells[x][y] ? this.cells[x][y].serialize() : null);\r\n    }\r\n  }\r\n\r\n  return {\r\n    size: this.size,\r\n    cells: cellState\r\n  };\r\n};\r\n","import { Grid } from './grid'\r\nimport { Tile } from './tile'\r\nexport function GameManager(size, InputManager, Actuator, StorageManager) {\r\n  this.size           = size; // Size of the grid\r\n  this.inputManager   = new InputManager;\r\n  this.storageManager = new StorageManager;\r\n  this.actuator       = new Actuator;\r\n\r\n  this.startTiles     = 2;\r\n\r\n  this.inputManager.on(\"move\", this.move.bind(this));\r\n  this.inputManager.on(\"restart\", this.restart.bind(this));\r\n  this.inputManager.on(\"keepPlaying\", this.keepPlaying.bind(this));\r\n\r\n  this.setup();\r\n}\r\n\r\n// Restart the game\r\nGameManager.prototype.restart = function () {\r\n  this.storageManager.clearGameState();\r\n  this.actuator.continueGame(); // Clear the game won/lost message\r\n  this.setup();\r\n};\r\n\r\n// Keep playing after winning (allows going over 2048)\r\nGameManager.prototype.keepPlaying = function () {\r\n  this.keepPlaying = false;\r\n  this.actuator.continueGame(); // Clear the game won/lost message\r\n};\r\n\r\n// Return true if the game is lost, or has won and the user hasn't kept playing\r\nGameManager.prototype.isGameTerminated = function () {\r\n  return this.over || (this.won && !this.keepPlaying);\r\n};\r\n\r\n// Set up the game\r\nGameManager.prototype.setup = function () {\r\n  var previousState = this.storageManager.getGameState();\r\n\r\n  // Reload the game from a previous game if present\r\n  if (previousState) {\r\n    this.grid        = new Grid(previousState.grid.size,\r\n                                previousState.grid.cells); // Reload grid\r\n    this.score       = previousState.score;\r\n    this.over        = previousState.over;\r\n    this.won         = previousState.won;\r\n    this.keepPlaying = previousState.keepPlaying;\r\n  } else {\r\n    this.grid        = new Grid(this.size);\r\n    this.score       = 0;\r\n    this.over        = false;\r\n    this.won         = false;\r\n    this.keepPlaying = false;\r\n\r\n    // Add the initial tiles\r\n    this.addStartTiles();\r\n  }\r\n\r\n  // Update the actuator\r\n  this.actuate();\r\n};\r\n\r\n// Set up the initial tiles to start the game with\r\nGameManager.prototype.addStartTiles = function () {\r\n  for (var i = 0; i < this.startTiles; i++) {\r\n    this.addRandomTile();\r\n  }\r\n};\r\n\r\n// Adds a tile in a random position\r\nGameManager.prototype.addRandomTile = function () {\r\n  if (this.grid.cellsAvailable()) {\r\n    var value = Math.random() < 0.9 ? 2 : 4;\r\n    var tile = new Tile(this.grid.randomAvailableCell(), value);\r\n\r\n    this.grid.insertTile(tile);\r\n  }\r\n};\r\n\r\n// Sends the updated grid to the actuator\r\nGameManager.prototype.actuate = function () {\r\n  if (this.storageManager.getBestScore() < this.score) {\r\n    this.storageManager.setBestScore(this.score);\r\n  }\r\n\r\n  // Clear the state when the game is over (game over only, not win)\r\n  if (this.over) {\r\n    this.storageManager.clearGameState();\r\n  } else {\r\n    this.storageManager.setGameState(this.serialize());\r\n  }\r\n\r\n  this.actuator.actuate(this.grid, {\r\n    score:      this.score,\r\n    over:       this.over,\r\n    won:        this.won,\r\n    bestScore:  this.storageManager.getBestScore(),\r\n    terminated: this.isGameTerminated()\r\n  });\r\n\r\n};\r\n\r\n// Represent the current game as an object\r\nGameManager.prototype.serialize = function () {\r\n  return {\r\n    grid:        this.grid.serialize(),\r\n    score:       this.score,\r\n    over:        this.over,\r\n    won:         this.won,\r\n    keepPlaying: this.keepPlaying\r\n  };\r\n};\r\n\r\n// Save all tile positions and remove merger info\r\nGameManager.prototype.prepareTiles = function () {\r\n  this.grid.eachCell(function (x, y, tile) {\r\n    if (tile) {\r\n      tile.mergedFrom = null;\r\n      tile.savePosition();\r\n    }\r\n  });\r\n};\r\n\r\n// Move a tile and its representation\r\nGameManager.prototype.moveTile = function (tile, cell) {\r\n  this.grid.cells[tile.x][tile.y] = null;\r\n  this.grid.cells[cell.x][cell.y] = tile;\r\n  tile.updatePosition(cell);\r\n};\r\n\r\n// Move tiles on the grid in the specified direction\r\nGameManager.prototype.move = function (direction) {\r\n  // 0: up, 1: right, 2: down, 3: left\r\n  var self = this;\r\n\r\n  if (this.isGameTerminated()) return; // Don't do anything if the game's over\r\n\r\n  var cell, tile;\r\n\r\n  var vector     = this.getVector(direction);\r\n  var traversals = this.buildTraversals(vector);\r\n  var moved      = false;\r\n\r\n  // Save the current tile positions and remove merger information\r\n  this.prepareTiles();\r\n\r\n  // Traverse the grid in the right direction and move tiles\r\n  traversals.x.forEach(function (x) {\r\n    traversals.y.forEach(function (y) {\r\n      cell = { x: x, y: y };\r\n      tile = self.grid.cellContent(cell);\r\n\r\n      if (tile) {\r\n        var positions = self.findFarthestPosition(cell, vector);\r\n        var next      = self.grid.cellContent(positions.next);\r\n\r\n        // Only one merger per row traversal?\r\n        if (next && next.value === tile.value && !next.mergedFrom) {\r\n          var merged = new Tile(positions.next, tile.value * 2);\r\n          merged.mergedFrom = [tile, next];\r\n\r\n          self.grid.insertTile(merged);\r\n          self.grid.removeTile(tile);\r\n\r\n          // Converge the two tiles' positions\r\n          tile.updatePosition(positions.next);\r\n\r\n          // Update the score\r\n          self.score += merged.value;\r\n\r\n          // The mighty 2048 tile\r\n          if (merged.value === 2048) self.won = true;\r\n        } else {\r\n          self.moveTile(tile, positions.farthest);\r\n        }\r\n\r\n        if (!self.positionsEqual(cell, tile)) {\r\n          moved = true; // The tile moved from its original cell!\r\n        }\r\n      }\r\n    });\r\n  });\r\n\r\n  if (moved) {\r\n    this.addRandomTile();\r\n\r\n    if (!this.movesAvailable()) {\r\n      this.over = true; // Game over!\r\n    }\r\n\r\n    this.actuate();\r\n  }\r\n};\r\n\r\n// Get the vector representing the chosen direction\r\nGameManager.prototype.getVector = function (direction) {\r\n  // Vectors representing tile movement\r\n  var map = {\r\n    0: { x: 0,  y: -1 }, // Up\r\n    1: { x: 1,  y: 0 },  // Right\r\n    2: { x: 0,  y: 1 },  // Down\r\n    3: { x: -1, y: 0 }   // Left\r\n  };\r\n\r\n  return map[direction];\r\n};\r\n\r\n// Build a list of positions to traverse in the right order\r\nGameManager.prototype.buildTraversals = function (vector) {\r\n  var traversals = { x: [], y: [] };\r\n\r\n  for (var pos = 0; pos < this.size; pos++) {\r\n    traversals.x.push(pos);\r\n    traversals.y.push(pos);\r\n  }\r\n\r\n  // Always traverse from the farthest cell in the chosen direction\r\n  if (vector.x === 1) traversals.x = traversals.x.reverse();\r\n  if (vector.y === 1) traversals.y = traversals.y.reverse();\r\n\r\n  return traversals;\r\n};\r\n\r\nGameManager.prototype.findFarthestPosition = function (cell, vector) {\r\n  var previous;\r\n\r\n  // Progress towards the vector direction until an obstacle is found\r\n  do {\r\n    previous = cell;\r\n    cell     = { x: previous.x + vector.x, y: previous.y + vector.y };\r\n  } while (this.grid.withinBounds(cell) &&\r\n           this.grid.cellAvailable(cell));\r\n\r\n  return {\r\n    farthest: previous,\r\n    next: cell // Used to check if a merge is required\r\n  };\r\n};\r\n\r\nGameManager.prototype.movesAvailable = function () {\r\n  return this.grid.cellsAvailable() || this.tileMatchesAvailable();\r\n};\r\n\r\n// Check for available matches between tiles (more expensive check)\r\nGameManager.prototype.tileMatchesAvailable = function () {\r\n  var self = this;\r\n\r\n  var tile;\r\n\r\n  for (var x = 0; x < this.size; x++) {\r\n    for (var y = 0; y < this.size; y++) {\r\n      tile = this.grid.cellContent({ x: x, y: y });\r\n\r\n      if (tile) {\r\n        for (var direction = 0; direction < 4; direction++) {\r\n          var vector = self.getVector(direction);\r\n          var cell   = { x: x + vector.x, y: y + vector.y };\r\n\r\n          var other  = self.grid.cellContent(cell);\r\n\r\n          if (other && other.value === tile.value) {\r\n            return true; // These two tiles can be merged\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nGameManager.prototype.positionsEqual = function (first, second) {\r\n  return first.x === second.x && first.y === second.y;\r\n};\r\n","import './bind_polyfill'\r\nimport './classlist_polyfill'\r\nimport './animframe_polyfill'\r\nimport { KeyboardInputManager } from './keyboard_input_manager';\r\nimport { HTMLActuator } from './html_actuator';\r\nimport { LocalStorageManager } from './local_storage_manager';\r\nimport { GameManager } from './game_manager';\r\n\r\n// Wait till the browser is ready to render the game (avoids glitches)\r\nwindow.requestAnimationFrame(function () {\r\n  new GameManager(4, KeyboardInputManager, HTMLActuator, LocalStorageManager);\r\n});\r\n"]}