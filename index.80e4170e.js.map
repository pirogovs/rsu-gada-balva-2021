{"mappings":"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","sources":["./js/keyboard_input_manager.js","./js/html_actuator.js","./js/local_storage_manager.js","./js/tile.js","./js/grid.js","./js/game_manager.js","./js/bind_polyfill.js","./js/classlist_polyfill.js","./js/animframe_polyfill.js","./js/application.js"],"sourcesContent":["export function KeyboardInputManager() {\n  this.events = {};\n\n  if (window.navigator.msPointerEnabled) {\n    //Internet Explorer 10 style\n    this.eventTouchstart    = \"MSPointerDown\";\n    this.eventTouchmove     = \"MSPointerMove\";\n    this.eventTouchend      = \"MSPointerUp\";\n  } else {\n    this.eventTouchstart    = \"touchstart\";\n    this.eventTouchmove     = \"touchmove\";\n    this.eventTouchend      = \"touchend\";\n  }\n\n  this.listen();\n}\n\nKeyboardInputManager.prototype.on = function (event, callback) {\n  if (!this.events[event]) {\n    this.events[event] = [];\n  }\n  this.events[event].push(callback);\n};\n\nKeyboardInputManager.prototype.emit = function (event, data) {\n  var callbacks = this.events[event];\n  if (callbacks) {\n    callbacks.forEach(function (callback) {\n      callback(data);\n    });\n  }\n};\n\nKeyboardInputManager.prototype.listen = function () {\n  var self = this;\n\n  var map = {\n    38: 0, // Up\n    39: 1, // Right\n    40: 2, // Down\n    37: 3, // Left\n    75: 0, // Vim up\n    76: 1, // Vim right\n    74: 2, // Vim down\n    72: 3, // Vim left\n    87: 0, // W\n    68: 1, // D\n    83: 2, // S\n    65: 3  // A\n  };\n\n  // Respond to direction keys\n  document.addEventListener(\"keydown\", function (event) {\n    var modifiers = event.altKey || event.ctrlKey || event.metaKey ||\n                    event.shiftKey;\n    var mapped    = map[event.which];\n\n    if (!modifiers) {\n      if (mapped !== undefined) {\n        event.preventDefault();\n        self.emit(\"move\", mapped);\n      }\n    }\n\n    // R key restarts the game\n    if (!modifiers && event.which === 82) {\n      self.restart.call(self, event);\n    }\n  });\n\n  // Respond to button presses\n  this.bindButtonPress(\".retry-button\", this.restart);\n  this.bindButtonPress(\".restart-button\", this.restart);\n  this.bindButtonPress(\".keep-playing-button\", this.keepPlaying);\n\n  // Respond to swipe events\n  var touchStartClientX, touchStartClientY;\n  var gameContainer = document.getElementsByClassName(\"game-container\")[0];\n\n  gameContainer.addEventListener(this.eventTouchstart, function (event) {\n    if ((!window.navigator.msPointerEnabled && event.touches.length > 1) ||\n        event.targetTouches.length > 1) {\n      return; // Ignore if touching with more than 1 finger\n    }\n\n    if (window.navigator.msPointerEnabled) {\n      touchStartClientX = event.pageX;\n      touchStartClientY = event.pageY;\n    } else {\n      touchStartClientX = event.touches[0].clientX;\n      touchStartClientY = event.touches[0].clientY;\n    }\n\n    event.preventDefault();\n  });\n\n  gameContainer.addEventListener(this.eventTouchmove, function (event) {\n    event.preventDefault();\n  });\n\n  gameContainer.addEventListener(this.eventTouchend, function (event) {\n    if ((!window.navigator.msPointerEnabled && event.touches.length > 0) ||\n        event.targetTouches.length > 0) {\n      return; // Ignore if still touching with one or more fingers\n    }\n\n    var touchEndClientX, touchEndClientY;\n\n    if (window.navigator.msPointerEnabled) {\n      touchEndClientX = event.pageX;\n      touchEndClientY = event.pageY;\n    } else {\n      touchEndClientX = event.changedTouches[0].clientX;\n      touchEndClientY = event.changedTouches[0].clientY;\n    }\n\n    var dx = touchEndClientX - touchStartClientX;\n    var absDx = Math.abs(dx);\n\n    var dy = touchEndClientY - touchStartClientY;\n    var absDy = Math.abs(dy);\n\n    if (Math.max(absDx, absDy) > 10) {\n      // (right : left) : (down : up)\n      self.emit(\"move\", absDx > absDy ? (dx > 0 ? 1 : 3) : (dy > 0 ? 2 : 0));\n    }\n  });\n};\n\nKeyboardInputManager.prototype.restart = function (event) {\n  event.preventDefault();\n  this.emit(\"restart\");\n};\n\nKeyboardInputManager.prototype.keepPlaying = function (event) {\n  event.preventDefault();\n  this.emit(\"keepPlaying\");\n};\n\nKeyboardInputManager.prototype.bindButtonPress = function (selector, fn) {\n  var button = document.querySelector(selector);\n  button.addEventListener(\"click\", fn.bind(this));\n  button.addEventListener(this.eventTouchend, fn.bind(this));\n};\n","export function HTMLActuator() {\n  this.tileContainer    = document.querySelector(\".tile-container\");\n  this.scoreContainer   = document.querySelector(\".score-container\");\n  this.bestContainer    = document.querySelector(\".best-container\");\n  this.messageContainer = document.querySelector(\".game-message\");\n\n  this.score = 0;\n}\n\nHTMLActuator.prototype.actuate = function (grid, metadata) {\n  var self = this;\n\n  window.requestAnimationFrame(function () {\n    self.clearContainer(self.tileContainer);\n\n    grid.cells.forEach(function (column) {\n      column.forEach(function (cell) {\n        if (cell) {\n          self.addTile(cell);\n        }\n      });\n    });\n\n    self.updateScore(metadata.score);\n    self.updateBestScore(metadata.bestScore);\n\n    if (metadata.terminated) {\n      if (metadata.over) {\n        self.message(false); // You lose\n      } else if (metadata.won) {\n        self.message(true); // You win!\n      }\n    }\n\n  });\n};\n\n// Continues the game (both restart and keep playing)\nHTMLActuator.prototype.continueGame = function () {\n  this.clearMessage();\n};\n\nHTMLActuator.prototype.clearContainer = function (container) {\n  while (container.firstChild) {\n    container.removeChild(container.firstChild);\n  }\n};\n\nHTMLActuator.prototype.addTile = function (tile) {\n  var self = this;\n\n  var wrapper   = document.createElement(\"div\");\n  var inner     = document.createElement(\"div\");\n  var position  = tile.previousPosition || { x: tile.x, y: tile.y };\n  var positionClass = this.positionClass(position);\n\n  // We can't use classlist because it somehow glitches when replacing classes\n  var classes = [\"tile\", \"tile-\" + tile.value, positionClass];\n\n  if (tile.value > 2048) classes.push(\"tile-super\");\n\n  this.applyClasses(wrapper, classes);\n\n  inner.classList.add(\"tile-inner\");\n  // inner.textContent = tile.value;\n\n  if (tile.previousPosition) {\n    // Make sure that the tile gets rendered in the previous position first\n    window.requestAnimationFrame(function () {\n      classes[2] = self.positionClass({ x: tile.x, y: tile.y });\n      self.applyClasses(wrapper, classes); // Update the position\n    });\n  } else if (tile.mergedFrom) {\n    classes.push(\"tile-merged\");\n    this.applyClasses(wrapper, classes);\n\n    // Render the tiles that merged\n    tile.mergedFrom.forEach(function (merged) {\n      self.addTile(merged);\n    });\n  } else {\n    classes.push(\"tile-new\");\n    this.applyClasses(wrapper, classes);\n  }\n\n  // Add the inner part of the tile to the wrapper\n  wrapper.appendChild(inner);\n\n  // Put the tile on the board\n  this.tileContainer.appendChild(wrapper);\n};\n\nHTMLActuator.prototype.applyClasses = function (element, classes) {\n  element.setAttribute(\"class\", classes.join(\" \"));\n};\n\nHTMLActuator.prototype.normalizePosition = function (position) {\n  return { x: position.x + 1, y: position.y + 1 };\n};\n\nHTMLActuator.prototype.positionClass = function (position) {\n  position = this.normalizePosition(position);\n  return \"tile-position-\" + position.x + \"-\" + position.y;\n};\n\nHTMLActuator.prototype.updateScore = function (score) {\n  this.clearContainer(this.scoreContainer);\n\n  var difference = score - this.score;\n  this.score = score;\n\n  this.scoreContainer.textContent = this.score;\n\n  if (difference > 0) {\n    var addition = document.createElement(\"div\");\n    addition.classList.add(\"score-addition\");\n    addition.textContent = \"+\" + difference;\n\n    this.scoreContainer.appendChild(addition);\n  }\n};\n\nHTMLActuator.prototype.updateBestScore = function (bestScore) {\n  this.bestContainer.textContent = bestScore;\n};\n\nHTMLActuator.prototype.message = function (won) {\n  var type    = won ? \"game-won\" : \"game-over\";\n  var message = won ? \"Tu uzvarēji!\" : \"Spēle beigusies!\";\n\n  this.messageContainer.classList.add(type);\n  this.messageContainer.getElementsByTagName(\"p\")[0].textContent = message;\n};\n\nHTMLActuator.prototype.clearMessage = function () {\n  // IE only takes one value to remove at a time.\n  this.messageContainer.classList.remove(\"game-won\");\n  this.messageContainer.classList.remove(\"game-over\");\n};\n","window.fakeStorage = {\n  _data: {},\n\n  setItem: function (id, val) {\n    return this._data[id] = String(val);\n  },\n\n  getItem: function (id) {\n    return this._data.hasOwnProperty(id) ? this._data[id] : undefined;\n  },\n\n  removeItem: function (id) {\n    return delete this._data[id];\n  },\n\n  clear: function () {\n    return this._data = {};\n  }\n};\n\nexport function LocalStorageManager() {\n  this.bestScoreKey     = \"bestScore\";\n  this.gameStateKey     = \"gameState\";\n\n  var supported = this.localStorageSupported();\n  this.storage = supported ? window.localStorage : window.fakeStorage;\n}\n\nLocalStorageManager.prototype.localStorageSupported = function () {\n  var testKey = \"test\";\n\n  try {\n    var storage = window.localStorage;\n    storage.setItem(testKey, \"1\");\n    storage.removeItem(testKey);\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\n// Best score getters/setters\nLocalStorageManager.prototype.getBestScore = function () {\n  return this.storage.getItem(this.bestScoreKey) || 0;\n};\n\nLocalStorageManager.prototype.setBestScore = function (score) {\n  this.storage.setItem(this.bestScoreKey, score);\n};\n\n// Game state getters/setters and clearing\nLocalStorageManager.prototype.getGameState = function () {\n  var stateJSON = this.storage.getItem(this.gameStateKey);\n  return stateJSON ? JSON.parse(stateJSON) : null;\n};\n\nLocalStorageManager.prototype.setGameState = function (gameState) {\n  this.storage.setItem(this.gameStateKey, JSON.stringify(gameState));\n};\n\nLocalStorageManager.prototype.clearGameState = function () {\n  this.storage.removeItem(this.gameStateKey);\n};\n","export function Tile(position, value) {\n  this.x                = position.x;\n  this.y                = position.y;\n  this.value            = value || 2;\n\n  this.previousPosition = null;\n  this.mergedFrom       = null; // Tracks tiles that merged together\n}\n\nTile.prototype.savePosition = function () {\n  this.previousPosition = { x: this.x, y: this.y };\n};\n\nTile.prototype.updatePosition = function (position) {\n  this.x = position.x;\n  this.y = position.y;\n};\n\nTile.prototype.serialize = function () {\n  return {\n    position: {\n      x: this.x,\n      y: this.y\n    },\n    value: this.value\n  };\n};\n","import { Tile } from './tile'\nexport function Grid(size, previousState) {\n  this.size = size;\n  this.cells = previousState ? this.fromState(previousState) : this.empty();\n}\n\n// Build a grid of the specified size\nGrid.prototype.empty = function () {\n  var cells = [];\n\n  for (var x = 0; x < this.size; x++) {\n    var row = cells[x] = [];\n\n    for (var y = 0; y < this.size; y++) {\n      row.push(null);\n    }\n  }\n\n  return cells;\n};\n\nGrid.prototype.fromState = function (state) {\n  var cells = [];\n\n  for (var x = 0; x < this.size; x++) {\n    var row = cells[x] = [];\n\n    for (var y = 0; y < this.size; y++) {\n      var tile = state[x][y];\n      row.push(tile ? new Tile(tile.position, tile.value) : null);\n    }\n  }\n\n  return cells;\n};\n\n// Find the first available random position\nGrid.prototype.randomAvailableCell = function () {\n  var cells = this.availableCells();\n\n  if (cells.length) {\n    return cells[Math.floor(Math.random() * cells.length)];\n  }\n};\n\nGrid.prototype.availableCells = function () {\n  var cells = [];\n\n  this.eachCell(function (x, y, tile) {\n    if (!tile) {\n      cells.push({ x: x, y: y });\n    }\n  });\n\n  return cells;\n};\n\n// Call callback for every cell\nGrid.prototype.eachCell = function (callback) {\n  for (var x = 0; x < this.size; x++) {\n    for (var y = 0; y < this.size; y++) {\n      callback(x, y, this.cells[x][y]);\n    }\n  }\n};\n\n// Check if there are any cells available\nGrid.prototype.cellsAvailable = function () {\n  return !!this.availableCells().length;\n};\n\n// Check if the specified cell is taken\nGrid.prototype.cellAvailable = function (cell) {\n  return !this.cellOccupied(cell);\n};\n\nGrid.prototype.cellOccupied = function (cell) {\n  return !!this.cellContent(cell);\n};\n\nGrid.prototype.cellContent = function (cell) {\n  if (this.withinBounds(cell)) {\n    return this.cells[cell.x][cell.y];\n  } else {\n    return null;\n  }\n};\n\n// Inserts a tile at its position\nGrid.prototype.insertTile = function (tile) {\n  this.cells[tile.x][tile.y] = tile;\n};\n\nGrid.prototype.removeTile = function (tile) {\n  this.cells[tile.x][tile.y] = null;\n};\n\nGrid.prototype.withinBounds = function (position) {\n  return position.x >= 0 && position.x < this.size &&\n         position.y >= 0 && position.y < this.size;\n};\n\nGrid.prototype.serialize = function () {\n  var cellState = [];\n\n  for (var x = 0; x < this.size; x++) {\n    var row = cellState[x] = [];\n\n    for (var y = 0; y < this.size; y++) {\n      row.push(this.cells[x][y] ? this.cells[x][y].serialize() : null);\n    }\n  }\n\n  return {\n    size: this.size,\n    cells: cellState\n  };\n};\n","import { Grid } from './grid'\nimport { Tile } from './tile'\nexport function GameManager(size, InputManager, Actuator, StorageManager) {\n  this.size           = size; // Size of the grid\n  this.inputManager   = new InputManager;\n  this.storageManager = new StorageManager;\n  this.actuator       = new Actuator;\n\n  this.startTiles     = 2;\n\n  this.inputManager.on(\"move\", this.move.bind(this));\n  this.inputManager.on(\"restart\", this.restart.bind(this));\n  this.inputManager.on(\"keepPlaying\", this.keepPlaying.bind(this));\n\n  this.setup();\n}\n\n// Restart the game\nGameManager.prototype.restart = function () {\n  this.storageManager.clearGameState();\n  this.actuator.continueGame(); // Clear the game won/lost message\n  this.setup();\n};\n\n// Keep playing after winning (allows going over 2048)\nGameManager.prototype.keepPlaying = function () {\n  this.keepPlaying = false;\n  this.actuator.continueGame(); // Clear the game won/lost message\n};\n\n// Return true if the game is lost, or has won and the user hasn't kept playing\nGameManager.prototype.isGameTerminated = function () {\n  return this.over || (this.won && !this.keepPlaying);\n};\n\n// Set up the game\nGameManager.prototype.setup = function () {\n  var previousState = this.storageManager.getGameState();\n\n  // Reload the game from a previous game if present\n  if (previousState) {\n    this.grid        = new Grid(previousState.grid.size,\n                                previousState.grid.cells); // Reload grid\n    this.score       = previousState.score;\n    this.over        = previousState.over;\n    this.won         = previousState.won;\n    this.keepPlaying = previousState.keepPlaying;\n  } else {\n    this.grid        = new Grid(this.size);\n    this.score       = 0;\n    this.over        = false;\n    this.won         = false;\n    this.keepPlaying = false;\n\n    // Add the initial tiles\n    this.addStartTiles();\n  }\n\n  // Update the actuator\n  this.actuate();\n};\n\n// Set up the initial tiles to start the game with\nGameManager.prototype.addStartTiles = function () {\n  for (var i = 0; i < this.startTiles; i++) {\n    this.addRandomTile();\n  }\n};\n\n// Adds a tile in a random position\nGameManager.prototype.addRandomTile = function () {\n  if (this.grid.cellsAvailable()) {\n    var value = Math.random() < 0.9 ? 2 : 4;\n    var tile = new Tile(this.grid.randomAvailableCell(), value);\n\n    this.grid.insertTile(tile);\n  }\n};\n\n// Sends the updated grid to the actuator\nGameManager.prototype.actuate = function () {\n  if (this.storageManager.getBestScore() < this.score) {\n    this.storageManager.setBestScore(this.score);\n  }\n\n  // Clear the state when the game is over (game over only, not win)\n  if (this.over) {\n    this.storageManager.clearGameState();\n  } else {\n    this.storageManager.setGameState(this.serialize());\n  }\n\n  this.actuator.actuate(this.grid, {\n    score:      this.score,\n    over:       this.over,\n    won:        this.won,\n    bestScore:  this.storageManager.getBestScore(),\n    terminated: this.isGameTerminated()\n  });\n\n  if (this.won) {\n    this.storageManager.clearGameState();\n\n    setTimeout(function () {\n      document.querySelector('body').innerHTML = '<iframe src=\"https://docs.google.com/forms/d/e/1FAIpQLSdimPm5Gpx3hUZetvkkgTp20riglwkKYbwZMG1xmIvEQIJZJg/viewform?embedded=true\" width=\"100%\" height=\"1499\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\">Loading…</iframe>'\n    }, 2000);\n  }\n\n};\n\n// Represent the current game as an object\nGameManager.prototype.serialize = function () {\n  return {\n    grid:        this.grid.serialize(),\n    score:       this.score,\n    over:        this.over,\n    won:         this.won,\n    keepPlaying: this.keepPlaying\n  };\n};\n\n// Save all tile positions and remove merger info\nGameManager.prototype.prepareTiles = function () {\n  this.grid.eachCell(function (x, y, tile) {\n    if (tile) {\n      tile.mergedFrom = null;\n      tile.savePosition();\n    }\n  });\n};\n\n// Move a tile and its representation\nGameManager.prototype.moveTile = function (tile, cell) {\n  this.grid.cells[tile.x][tile.y] = null;\n  this.grid.cells[cell.x][cell.y] = tile;\n  tile.updatePosition(cell);\n};\n\n// Move tiles on the grid in the specified direction\nGameManager.prototype.move = function (direction) {\n  // 0: up, 1: right, 2: down, 3: left\n  var self = this;\n\n  if (this.isGameTerminated()) return; // Don't do anything if the game's over\n\n  var cell, tile;\n\n  var vector     = this.getVector(direction);\n  var traversals = this.buildTraversals(vector);\n  var moved      = false;\n\n  // Save the current tile positions and remove merger information\n  this.prepareTiles();\n\n  // Traverse the grid in the right direction and move tiles\n  traversals.x.forEach(function (x) {\n    traversals.y.forEach(function (y) {\n      cell = { x: x, y: y };\n      tile = self.grid.cellContent(cell);\n\n      if (tile) {\n        var positions = self.findFarthestPosition(cell, vector);\n        var next      = self.grid.cellContent(positions.next);\n\n        // Only one merger per row traversal?\n        if (next && next.value === tile.value && !next.mergedFrom) {\n          var merged = new Tile(positions.next, tile.value * 2);\n          merged.mergedFrom = [tile, next];\n\n          self.grid.insertTile(merged);\n          self.grid.removeTile(tile);\n\n          // Converge the two tiles' positions\n          tile.updatePosition(positions.next);\n\n          // Update the score\n          self.score += merged.value;\n\n          // The mighty 2048 tile\n          if (merged.value === 2048) self.won = true;\n        } else {\n          self.moveTile(tile, positions.farthest);\n        }\n\n        if (!self.positionsEqual(cell, tile)) {\n          moved = true; // The tile moved from its original cell!\n        }\n      }\n    });\n  });\n\n  if (moved) {\n    this.addRandomTile();\n\n    if (!this.movesAvailable()) {\n      this.over = true; // Game over!\n    }\n\n    this.actuate();\n  }\n};\n\n// Get the vector representing the chosen direction\nGameManager.prototype.getVector = function (direction) {\n  // Vectors representing tile movement\n  var map = {\n    0: { x: 0,  y: -1 }, // Up\n    1: { x: 1,  y: 0 },  // Right\n    2: { x: 0,  y: 1 },  // Down\n    3: { x: -1, y: 0 }   // Left\n  };\n\n  return map[direction];\n};\n\n// Build a list of positions to traverse in the right order\nGameManager.prototype.buildTraversals = function (vector) {\n  var traversals = { x: [], y: [] };\n\n  for (var pos = 0; pos < this.size; pos++) {\n    traversals.x.push(pos);\n    traversals.y.push(pos);\n  }\n\n  // Always traverse from the farthest cell in the chosen direction\n  if (vector.x === 1) traversals.x = traversals.x.reverse();\n  if (vector.y === 1) traversals.y = traversals.y.reverse();\n\n  return traversals;\n};\n\nGameManager.prototype.findFarthestPosition = function (cell, vector) {\n  var previous;\n\n  // Progress towards the vector direction until an obstacle is found\n  do {\n    previous = cell;\n    cell     = { x: previous.x + vector.x, y: previous.y + vector.y };\n  } while (this.grid.withinBounds(cell) &&\n           this.grid.cellAvailable(cell));\n\n  return {\n    farthest: previous,\n    next: cell // Used to check if a merge is required\n  };\n};\n\nGameManager.prototype.movesAvailable = function () {\n  return this.grid.cellsAvailable() || this.tileMatchesAvailable();\n};\n\n// Check for available matches between tiles (more expensive check)\nGameManager.prototype.tileMatchesAvailable = function () {\n  var self = this;\n\n  var tile;\n\n  for (var x = 0; x < this.size; x++) {\n    for (var y = 0; y < this.size; y++) {\n      tile = this.grid.cellContent({ x: x, y: y });\n\n      if (tile) {\n        for (var direction = 0; direction < 4; direction++) {\n          var vector = self.getVector(direction);\n          var cell   = { x: x + vector.x, y: y + vector.y };\n\n          var other  = self.grid.cellContent(cell);\n\n          if (other && other.value === tile.value) {\n            return true; // These two tiles can be merged\n          }\n        }\n      }\n    }\n  }\n\n  return false;\n};\n\nGameManager.prototype.positionsEqual = function (first, second) {\n  return first.x === second.x && first.y === second.y;\n};\n","Function.prototype.bind = Function.prototype.bind || function (target) {\n  var self = this;\n  return function (args) {\n    if (!(args instanceof Array)) {\n      args = [args];\n    }\n    self.apply(target, args);\n  };\n};\n","(function () {\n  if (typeof window.Element === \"undefined\" ||\n      \"classList\" in document.documentElement) {\n    return;\n  }\n\n  var prototype = Array.prototype,\n      push = prototype.push,\n      splice = prototype.splice,\n      join = prototype.join;\n\n  function DOMTokenList(el) {\n    this.el = el;\n    // The className needs to be trimmed and split on whitespace\n    // to retrieve a list of classes.\n    var classes = el.className.replace(/^\\s+|\\s+$/g, '').split(/\\s+/);\n    for (var i = 0; i < classes.length; i++) {\n      push.call(this, classes[i]);\n    }\n  }\n\n  DOMTokenList.prototype = {\n    add: function (token) {\n      if (this.contains(token)) return;\n      push.call(this, token);\n      this.el.className = this.toString();\n    },\n    contains: function (token) {\n      return this.el.className.indexOf(token) != -1;\n    },\n    item: function (index) {\n      return this[index] || null;\n    },\n    remove: function (token) {\n      if (!this.contains(token)) return;\n      for (var i = 0; i < this.length; i++) {\n        if (this[i] == token) break;\n      }\n      splice.call(this, i, 1);\n      this.el.className = this.toString();\n    },\n    toString: function () {\n      return join.call(this, ' ');\n    },\n    toggle: function (token) {\n      if (!this.contains(token)) {\n        this.add(token);\n      } else {\n        this.remove(token);\n      }\n\n      return this.contains(token);\n    }\n  };\n\n  window.DOMTokenList = DOMTokenList;\n\n  function defineElementGetter(obj, prop, getter) {\n    if (Object.defineProperty) {\n      Object.defineProperty(obj, prop, {\n        get: getter\n      });\n    } else {\n      obj.__defineGetter__(prop, getter);\n    }\n  }\n\n  defineElementGetter(HTMLElement.prototype, 'classList', function () {\n    return new DOMTokenList(this);\n  });\n})();\n","(function () {\n  var lastTime = 0;\n  var vendors = ['webkit', 'moz'];\n  for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n    window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n    window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] ||\n      window[vendors[x] + 'CancelRequestAnimationFrame'];\n  }\n\n  if (!window.requestAnimationFrame) {\n    window.requestAnimationFrame = function (callback) {\n      var currTime = new Date().getTime();\n      var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n      var id = window.setTimeout(function () {\n        callback(currTime + timeToCall);\n      },\n      timeToCall);\n      lastTime = currTime + timeToCall;\n      return id;\n    };\n  }\n\n  if (!window.cancelAnimationFrame) {\n    window.cancelAnimationFrame = function (id) {\n      clearTimeout(id);\n    };\n  }\n}());\n","import './bind_polyfill'\nimport './classlist_polyfill'\nimport './animframe_polyfill'\nimport { KeyboardInputManager } from './keyboard_input_manager';\nimport { HTMLActuator } from './html_actuator';\nimport { LocalStorageManager } from './local_storage_manager';\nimport { GameManager } from './game_manager';\n\n// Wait till the browser is ready to render the game (avoids glitches)\nwindow.requestAnimationFrame(function () {\n  new GameManager(4, KeyboardInputManager, HTMLActuator, LocalStorageManager);\n});\n"],"names":["$94fc377cf2c834c222627c49010c8c6b$export$KeyboardInputManager","this","events","window","navigator","msPointerEnabled","eventTouchstart","eventTouchmove","eventTouchend","listen","$f10b044b32b78540662cd06181ef5756$export$HTMLActuator","tileContainer","document","querySelector","scoreContainer","bestContainer","messageContainer","score","$c4c87e1daf41c282a838d8b8feeea302$export$LocalStorageManager","bestScoreKey","gameStateKey","supported","localStorageSupported","storage","localStorage","fakeStorage","$13714f18922574a7461531a40fda761f$export$Tile","position","value","x","y","previousPosition","mergedFrom","$6beb9e5c2ea22486696cda5b62f76207$export$Grid","size","previousState","cells","fromState","empty","$8c17f96b7e8d406f70cf135df151266f$export$GameManager","InputManager","Actuator","StorageManager","inputManager","storageManager","actuator","startTiles","on","move","bind","restart","keepPlaying","setup","Function","prototype","target","self","args","Array","apply","Element","documentElement","obj","prop","getter","push","splice","join","DOMTokenList","add","token","contains","call","el","className","toString","indexOf","item","index","remove","i","length","toggle","HTMLElement","Object","defineProperty","get","__defineGetter__","classes","replace","split","lastTime","vendors","requestAnimationFrame","cancelAnimationFrame","callback","currTime","Date","getTime","timeToCall","Math","max","id","setTimeout","clearTimeout","event","emit","data","callbacks","forEach","touchStartClientX","touchStartClientY","map","38","39","40","37","75","76","74","72","87","68","83","65","addEventListener","modifiers","altKey","ctrlKey","metaKey","shiftKey","mapped","which","undefined","preventDefault","bindButtonPress","gameContainer","getElementsByClassName","touches","targetTouches","pageX","pageY","clientX","clientY","touchEndClientX","touchEndClientY","changedTouches","dx","absDx","abs","dy","absDy","selector","fn","button","actuate","grid","metadata","clearContainer","column","cell","addTile","updateScore","updateBestScore","bestScore","terminated","over","message","won","continueGame","clearMessage","container","firstChild","removeChild","tile","wrapper","createElement","inner","positionClass","applyClasses","classList","merged","appendChild","element","setAttribute","normalizePosition","difference","textContent","addition","type","getElementsByTagName","_data","setItem","val","String","getItem","hasOwnProperty","removeItem","clear","testKey","error","getBestScore","setBestScore","getGameState","stateJSON","JSON","parse","setGameState","gameState","stringify","clearGameState","savePosition","updatePosition","serialize","row","state","randomAvailableCell","availableCells","floor","random","eachCell","cellsAvailable","cellAvailable","cellOccupied","cellContent","withinBounds","insertTile","removeTile","cellState","isGameTerminated","addStartTiles","addRandomTile","innerHTML","prepareTiles","moveTile","direction","vector","getVector","traversals","buildTraversals","moved","positions","findFarthestPosition","next","farthest","positionsEqual","movesAvailable","0","1","2","3","pos","reverse","previous","tileMatchesAvailable","other","first","second"],"version":3,"file":"index.80e4170e.js.map"}